{"pages":[{"title":"","text":"个人简介 分享很喜欢的**老罗**的一段话： “每一个生命来到世间都注定改变世界，别无选择。要么变得好一点，要么变得坏一点。你如果走进社会为了生存为了什么不要脸的理由，变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。如果你一生刚正不阿，如果你一生耿直，没有做任何恶心的事情，没做对别人有害的事情，一辈子拼了老命勉强把自己身边的几个人照顾好了，没有成名没有发财，没有成就伟大的事业，然后耿着脖子一生正直，到了七八十岁耿着脖子去世了。你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为世界上又多了一个好人。“ 善恶终有报,天道好轮回。不信抬头看,苍天饶过谁。无论何时何地，我们都要保持一颗积极乐观、善良感恩的心。但行好事莫问前程，永远年轻，永远热内盈眶，永远保持正能量。💪💪💪💪💪💪冲鸭！！！！ -&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;个人信息：计算机科学与技术专业从事JAVA后端开发码畜一枚坚信代码改变世界 博客信息 网站采用的Icarus主题 追求尽可能的简洁，清晰，易用。 在Icarus主题之上进行了部分修改。 更新日志：–2020.01.18：icarus3.0适配–2019.11.17：增加深色主题开关–2019.10.30：去图，精简卡片–2019.10.22：改版部分显示，优化速度–2019.10.16：文章列表加上评论数显示–2019.10.13：改版评论–2019.09.25：图片、资源接入CDN免费jsDelivr、文章加入置顶–2019.09.19：开源博客代码–2019.09.19：修改布局，拉伸布局，更宽的展示–2019.09.18：修改友链ui为一行三个，并适配移动端，暗黑模式文章增加评论链接，增加留言链接–2019.09.14：增加精简next主题–2019.09.14：利用中秋节放假，重做了首页的热门推荐、加个widget最新评论框、归档页加入文章贡献概览面板 本站推荐索引 博客主题相关 github Issue 作为博客微型数据库的应用 github page网站cdn优化加速 博客源码分享 博客换肤的一种实现方式思路 博客中gitalk最新评论的获取 博客图片上传picgo工具github图传使用 安装、部分配置icarus主题中文版 技术知识点 Java并发知识点 法律法规 法律法规数据库 中华人民共和国国旗法 中华人民共和国宪法 中华人民共和国消费者权益保护法 中华人民共和国刑事诉讼法 中华人民共和国婚姻法 中华人名共和国网络安全法 中华人民共和国劳动法 其他 网易云音乐歌单分享 计划2020计划 2019.12.31 2020-GOALS 跑两三场马拉松 2019计划 2018.12.31/21:59:00-&gt;更新于2019.12.31 2019-GOALS 购买的专业书籍至少看完一遍（并发、重构、设计模式…）-&gt; 95% 额外： 追了很多剧 总结： 有优点有缺点，没坚持下来的还是太多，追了太多剧。以后多学习，多思考！ 时间轴记录","link":"/about/index.html"},{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息： 网站图标：https://removeif.github.io/images/avatar.jpg 网站名称：辣椒の酱 网站地址：https://removeif.github.io 网站简介：后端开发，技术分享 加载中，稍等几秒...","link":"/friend/index.html"},{"title":"","text":"&nbsp;&nbsp;听听音乐 音乐播放器由mePlayer提供，布局参照网友博客所作，感谢作者的辛勤付出。更多音乐分享请查看歌单。 &nbsp;&nbsp;看看视频 ->点击以下条目开始播放视频,向下滑动查看更多","link":"/media/index.html"},{"title":"","text":"2021-05-22早骑行1","link":"/album/index.html"},{"title":"","text":"&nbsp;&nbsp;听听音乐 音乐播放器由mePlayer提供，布局参照网友博客所作，感谢作者的辛勤付出。更多音乐分享请查看歌单。 &nbsp;&nbsp;看看视频 ->点击以下条目开始播放视频,向下滑动查看更多","link":"/music/index.html"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/message/index.html"},{"title":"","text":"碎碎念 tips：github登录后按时间正序查看、可点赞加❤️、本插件地址..「+99次查看」 var gitalk = new Gitalk({ clientID: '46a9f3481b46ea0129d8', clientSecret: '79c7c9cb847e141757d7864453bcbf89f0655b24', id: '666666', repo: 'issue_database', owner: 'removeif', admin: \"removeif\", createIssueManually: true, distractionFreeMode: false }) gitalk.render('comment-container1')","link":"/self-talking/index.html"}],"posts":[{"title":"我的博客","text":"2b89934ad50791619a5e94785f3a21fe8db0fba813012bcd033fdb12d32d8f3a92f1857e56b6262a98584c0f990f072fccf12e7a31d68414607a022985b670f23cda2c6f27c7f6b45e79e4df061f8ac9b485c1a2b409cb0bb4e1d5049f5381be520b2e3a706c8b2220e6495a2485af3fbcecf2bde61a7e9cd685e964fa1325ba31e9c2dbd9b94987b37061575ac7848a488e267f3a7e7e577557e3ed4fa5caa6ff9e6c05dafad58a3dfbbb5764474ecb343e614b40b4ea0ea72393f75080b7200b3b9a6c3cbb619fe2979e63900f6572f24be66eab37f9fcf7bb89e21f2b83d44e4942145584b0ef9db01da1629febe393efcd5216ab5e90997fa4cba9ba8ff796043e840983fb4a7b5588e547033258c3e628916d633a76a264dbacc42abd5cf58a5adfa746dab7130e059ace0d95972b8a70eb88579b976fe9faf53462e1612b38565cbb6a4559ab71be88fd2cfbfa583ae3c2633e90d8ea0f0ad7fa67bc3eb5e72e8710a66c1ba79751a7defc9955d2d3f0aba41551f19288cfc913a7b8d26114a62fc51ac75f915af7d19b9243418c66aeded2db4b82df53a042cb69312e75388cff9ffefb0c2a38f67a0806bca5461c0fbd680a6ac2dfb94e5f6dc4ac224b639ce298e6016bba360a1c93491345200fc1c97c8efde94a127fef8e57908d03cd6fc2c23f623fe3db4006a16d5c77f663bdc6232de99205d125412bb59902c8663a4eca323081e52eb37a64d7a08582c9e22f17a0fdc9f227443848efee0603232a78a72351b697d1262489c387fde9073d7899c0784ee1da3988d5d7e32552bc19cc7d2e8434a3934117618360c23ae5da1b2b206cab217c32dc28b7088a2da875caa6ce1af6dada328d0a0839bd3c5cfae6c2b79cccede745b86aa16092dbec9e9d4be45021acc3472371494f29bc4a8ff490de95828f6eea21a081607a151dec272232d11db99e8edb6ea5d71542eb9e4a52764f0f9de0b3adab3803ffb929317648a98b6b6b1b039a763c9751b607be8b27437a75c01e0b82bd49a0ca3e848c0aa1986144f95ffa0ee73538325fcd9009bf5c08b767d8708f3779cc725a8f81f61365eb2102fdcae2ccefac8f5759d07b536b1e8f0c06f5b8ea824c4dee018f6f6a79d62879050f530fff49194b465a8aa193a505aaa392483b70b79214782179f04d407d55a231be338a7eba46968955fdeefe4506b02ab7101ee350dd13e951e7034fe2f4b34cf0a0bf645ae08de910181f5753c5cd97bd5c600820bc55a3fd96d18256bc2ffbeb4d3de20ca24120061412564669663fab0cb2e06e344048046f08654f8ac225884344cbcc7c043441423698a5406b2f96d6eb85b906883f8ec1f9ad82718997d14ed0d8d0c6c225df5262886976f466c21d0e3f3838bb855a77f805cc61e48614826fb30e9509d6d33608c40cb35a55c4aa436bb48acdc80ea2ea571fb1a5ca665ca0138253e071c92a30582642ea72830cc294ae9f216db459eb209d7c987b3efda8df0dacbd09af56118167b20ce9ddfdc22a8f9667d1bf20812160de3c8d7b3c4355c6c68c109007dd9a1fb31b100931eb84afdc647552988120cafb2ed2ca7dbb45e9f8816aeee7ae87c8e54303efddc30bda6ddd6c2fffe9ad5e03f81a230b4c6d4371340a5e52e804250f0cbb004e20412e88da36d93c475a9ed3357a42b9e70c171a41b68b10e08ae23f1ae5f0898a78ac8019d096d1d3cd6cba366998f59ed091f707316fe73b30aa78837421a35362a4687effdb7a4a29a9a6a8ca4903b0c8987a4f11d9f42512367ce75c7281c4fb13354af03b4e95238c5f427df4342f9631e5413c583bae78174199c988e3906e5a5845f9f34fb70a52095963dd08d15c48195ae009e504c256944435f5a9b5ab7d9dbb3d3390409e1ef71112e1b45fccd385c0ae5efb4aa4848776f14bebe7eb15a262146ab13892e8ea5b938ceb7b3a95cdadc6a6cd51189cec94278401ea2d2df317adfbad001f6acc512ecb175430d547deeb28d930a198d89fd9a7e3adad4e26689665f35117cf53c096f07161f826b6213814a8c25405f7af5fe8ee2dbe8768b937120e6d1b613d7b4da74d3e482a55defc9ef1ef988fae4e6ac778721476f1e08ab980ff85e5e643128ff68cbe32bedd783d44697d4c2731a0130b998b0f6869f384358367a0d868e1b27f926f0497ec2e40812d0759b8a7e8c9f6153db32a1a825c46fe8499ce6028a1b2a20436acf6653c2f702baecc5b2bb1351878a0 您好，这里需要密码。","link":"/2021/05/23/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"},{"title":"我的博客","text":"惊鸿一面 ​翻手为云覆手为雨 金盆洗手止风雨 不恋红尘却难舍回忆 每一段都有你 年少初遇常在我心 多年不减你深情 江山如画又怎能比拟 你送我的风景 柳下闻瑶琴起舞和一曲 仿佛映当年翩若惊鸿影 谁三言两语撩拨了情意 谁一颦一笑摇曳了星云 纸扇藏伏笔玄机诗文里 紫烟燃心语留香候人寻 史书列豪杰功过有几许 我今生何求惟你 年少初遇常在我心 多年不减你深情 江山如画又怎能比拟 你送我的风景 柳下闻瑶琴起舞和一曲 仿佛映当年翩若惊鸿影 谁三言两语撩拨了情意 谁一颦一笑摇曳了星云 纸扇藏伏笔玄机诗文里 紫烟燃心语留香候人寻 史书列豪杰功过有几许 我今生何求惟你 远山传来清晨悠然的曲笛 晓风掠走光阴 残月沉霜鬓里 有了你 恩怨都似飞鸿踏雪泥 柳下闻瑶琴起舞和一曲 仿佛映当年翩若惊鸿影 谁三言两语撩拨了情意 谁一颦一笑摇曳了星云 纸扇藏伏笔玄机诗文里 紫烟燃心语留香候人寻 史书列豪杰功过有几许 我今生何求惟你 我今生何求惟你","link":"/2021/05/23/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%20copy/"},{"title":"我的博客","text":"1笔记1.1堆区 栈区 方法区java里的静态成员变量是放在了堆内存还是栈内存](https://www.cnblogs.com/yanduanduan/p/7150874.html) 转自http://bbs.csdn[.NET](http://lib.csdn.net/base/dotnet)/topics/370001490 堆区: 1.存储的全部是对象，每个对象都包含一个与之对应的class的信息。(class的目的是得到操作指令)2.jvm只有一个堆区(heap)被所有线程共享，堆中不存放基本类型和对象引用，只存放对象本身栈区:1.每个线程包含一个栈区，栈中只保存基础数据类型的对象和自定义对象的引用(不是对象)，对象都存放在堆区中2.每个栈中的数据(原始类型和对象引用)都是私有的，其他栈不能访问。3.栈分为3个部分：基本类型变量区、执行环境上下文、操作指令区(存放操作指令)。方法区:1.又叫静态区，跟堆一样，被所有的线程共享。方法区包含所有的class和static变量。 2.方法区中包含的都是在整个程序中永远唯一的元素，如class，static变量。 程序运行时，我们最好对数据保存到什么地方做到心中有数。特别要注意的是内在的分配，有六个地方都可以保存数据：1、 寄存器。这是最快的保存区域，因为它位于和其他所有保存方式不同的地方：处理器内部。然而，寄存器的数量十分有限，所以寄存器是根据需要由编译器分配。我们对此没有直接的控制权，也不可能在自己的程序里找到寄存器存在的任何踪迹。2、 堆栈。驻留于常规RAM（随机访问存储器）区域。但可通过它的“堆栈指针”获得处理的直接支持。堆栈指针若向下移，会创建新的内存；若向上移，则会释放那些内存。这是一种特别快、特别有效的数据保存方式，仅次于寄存器。创建程序时，Java编译器必须准确地知道堆栈内保存的所有数据的“长度”以及“存在时间”。这是由于它必须生成相应的代码，以便向上和向下移动指针。这一限制无疑影响了程序的灵活性，所以尽管有些java数据要保存在堆栈里——特别是对象句柄，但java对象并不放到其中。3、 堆。一种常规用途的内存池（也在RAM区域），其中保存了java对象。和堆栈不同：“内存堆”或“堆”最吸引人的地方在于编译器不必知道要从堆里分配多少存储空间，也不必知道存储的数据要在堆里停留多长的时间。因此，用堆保存数据时会得到更大的灵活性。要求创建一个对象时，只需用new命令编制相碰的代码即可。执行这些代码时，会在堆里自动进行数据的保存。当然，为达到这种灵活性，必然会付出一定的代价：在堆里分配存储空间时会花掉更长的时间4、 静态存储。这儿的“静态”是指“位于固定位置”。程序运行期间，静态存储的数据将随时等候调用。可用static关键字指出一个对象的特定元素是静态的。但java对象本身永远都不会置入静态存储空间。5、 常数存储。常数值通常直接置于程序代码内部。这样做是安全的。因为它们永远都不会改变，有的常数需要严格地保护，所以可考虑将它们置入只读存储器（ROM）。6、 非RAM存储。若数据完全独立于一个程序之外，则程序不运行时仍可存在，并在程序的控制范围之外。其中两个最主要的例子便是“流式对象”和“固定对象”。对于流式对象，对象会变成字节流，通常会发给另一台机器，而对于固定对象，对象保存在磁盘中。即使程序中止运行，它们仍可保持自己的状态不变。对于这些类型的数据存储，一个特别有用的技艺就是它们能存在于其他媒体中，一旦需要，甚至能将它们恢复成普通的、基于RAM的对象。 首先，java里面是没有静态变量这个概念的,不信你自己在方法里面定义一个static int i =0；java里只有静态成员变量。它属于类的属性。至于他放在那里？楼上说的是静态区。我不知道到底有没有这个翻译。但是 深入jvm里是是翻译为方法区的。虚拟机的体系结构：堆,方法区，本地方法栈，pc寄存器。而方法区保存的就是一个类的模板，堆是放类的实例的。栈是一般来用来函数计算的。随便找本计算机底层的书都知道了。栈里的数据，函数执行完就不会存储了。这就是为什么局部变量每一次都是一样的。就算给他加一后，下次执行函数的时候还是原来的样子。 1.2数据库三范式数据库设计三大范式 为了建立冗余较小、结构合理的数据库，设计数据库时必须遵循一定的规则。在关系型数据库中这种规则就称为范式。范式是符合某一种设计要求的总结。要想设计一个结构合理的关系型数据库，必须满足一定的范式。 ​ 在实际开发中最为常见的设计范式有三个： 1．第一范式(确保每列保持原子性) 第一范式是最基本的范式。如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。 第一范式的合理遵循需要根据系统的实际需求来定。比如某些数据库系统中需要用到“地址”这个属性，本来直接将“地址”属性设计成一个数据库表的字段就行。但是如果系统经常会访问“地址”属性中的“城市”部分，那么就非要将“地址”这个属性重新拆分为省份、城市、详细地址等多个部分进行存储，这样在对地址中某一部分操作的时候将非常方便。这样设计才算满足了数据库的第一范式，如下表所示。 上表所示的用户信息遵循了第一范式的要求，这样在对用户使用城市进行分类的时候就非常方便，也提高了数据库的性能。 ​ 2．第二范式(确保表中的每列都和主键相关) 第二范式在第一范式的基础之上更进一层。第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。 比如要设计一个订单信息表，因为订单中可能会有多种商品，所以要将订单编号和商品编号作为数据库表的联合主键，如下表所示。 订单信息表 这样就产生一个问题：这个表中是以订单编号和商品编号作为联合主键。这样在该表中商品名称、单位、商品价格等信息不与该表的主键相关，而仅仅是与商品编号相关。所以在这里违反了第二范式的设计原则。 而如果把这个订单信息表进行拆分，把商品信息分离到另一个表中，把订单项目表也分离到另一个表中，就非常完美了。如下所示。 这样设计，在很大程度上减小了数据库的冗余。如果要获取订单的商品信息，使用商品编号到商品信息表中查询即可。 ​ 3．第三范式(确保每列都和主键列直接相关,而不是间接相关) 第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。 比如在设计一个订单数据表的时候，可以将客户编号作为一个外键和订单表建立相应的关系。而不可以在订单表中添加关于客户其它信息（比如姓名、所属公司等）的字段。如下面这两个表所示的设计就是一个满足第三范式的数据库表。 这样在查询订单信息的时候，就可以使用客户编号来引用客户信息表中的记录，也不必在订单信息表中多次输入客户信息的内容，减小了数据冗余。 1.3 mysql默认几个库介绍2016-12-20 22:57:22 更多 背景介绍： 当我们安装初始化mysql后，默认建了几个数据库，那么这些数据库有什么作用呢？mysql&gt; show databases;+——————–+| Database |+——————–+| information_schema || mysql || performance_schema || test |+——————–+4 rows in set (0.00 sec) information_schema详细介绍： information_schema数据库是MySQL自带的，它提供了访问数据库元数据的方式。什么是元数据呢？元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。有些时候用于表述该信息的其他术语包括“数据词典”和“系统目录”。在MySQL中，把 information_schema 看作是一个数据库，确切说是信息数据库。其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权 限等。在INFORMATION_SCHEMA中，有数个只读表。它们实际上是视图，而不是基本表，因此，你将无法看到与之相关的任何文件。 information_schema数据库表说明: SCHEMATA表：提供了当前mysql实例中所有数据库的信息。是show databases的结果取之此表。 TABLES表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。是show tables from schemaname的结果取之此表。 COLUMNS表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。是show columns from schemaname.tablename的结果取之此表。 STATISTICS表：提供了关于表索引的信息。是show index from schemaname.tablename的结果取之此表。 USER_PRIVILEGES（用户权限）表：给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。 SCHEMA_PRIVILEGES（方案权限）表：给出了关于方案（数据库）权限的信息。该信息来自mysql.db授权表。是非标准表。 TABLE_PRIVILEGES（表权限）表：给出了关于表权限的信息。该信息源自mysql.tables_priv授权表。是非标准表。 COLUMN_PRIVILEGES（列权限）表：给出了关于列权限的信息。该信息源自mysql.columns_priv授权表。是非标准表。 CHARACTER_SETS（字符集）表：提供了mysql实例可用字符集的信息。是SHOW CHARACTER SET结果集取之此表。 COLLATIONS表：提供了关于各字符集的对照信息。 COLLATION_CHARACTER_SET_APPLICABILITY表：指明了可用于校对的字符集。这些列等效于SHOW COLLATION的前两个显示字段。 TABLE_CONSTRAINTS表：描述了存在约束的表。以及表的约束类型。 KEY_COLUMN_USAGE表：描述了具有约束的键列。 ROUTINES表：提供了关于存储子程序（存储程序和函数）的信息。此时，ROUTINES表不包含自定义函数（UDF）。名为“mysql.proc name”的列指明了对应于INFORMATION_SCHEMA.ROUTINES表的mysql.proc表列。 VIEWS表：给出了关于数据库中的视图的信息。需要有show views权限，否则无法查看视图信息。 TRIGGERS表：提供了关于触发程序的信息。必须有super权限才能查看该表 mysql作用介绍：mysql：这个是mysql的核心数据库，类似于sql server中的master表，主要负责存储数据库的用户、权限设置、关键字等mysql自己需要使用的控制和管理信息。不可以删除，如果对mysql不是很了解，也不要轻易修改这个数据库里面的表信息。 performance_schema作用介绍： mysql 5.5 版本 新增了一个性能优化的引擎： PERFORMANCE_SCHEMA这个功能默认是关闭的：需要设置参数： performance_schema 才可以启动该功能，这个参数是静态参数，只能写在my.cnf 中 不能动态修改。先看看有什么东西吧：mysql&gt; use performance_schema;Database changedmysql&gt; show tables ;+———————————————-+| Tables_in_performance_schema |+———————————————-+| cond_instances || events_waits_current || events_waits_history || events_waits_history_long || events_waits_summary_by_instance || events_waits_summary_by_thread_by_event_name || events_waits_summary_global_by_event_name || file_instances || file_summary_by_event_name || file_summary_by_instance || mutex_instances || performance_timers || rwlock_instances || setup_consumers || setup_instruments || setup_timers || threads |+———————————————-+17 rows in set (0.00 sec) 这里的数据表分为几类： 1） setup table ： 设置表，配置监控选项。 2） current events table : 记录当前那些thread 正在发生什么事情。 3） history table 发生的各种事件的历史记录表 4） summary table 对各种事件的统计表 5） 杂项表，乱七八糟表。 setup 表： mysql&gt; SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES -&gt; WHERE TABLE_SCHEMA = ‘performance_schema’ -&gt; AND TABLE_NAME LIKE ‘setup%’;+——————-+| TABLE_NAME |+——————-+| setup_consumers || setup_instruments || setup_timers |+——————-+ setup_consumers 描述各种事件 setup_instruments 描述这个数据库下的表名以及是否开启监控。 setup_timers 描述 监控选项已经采样频率的时间间隔 test作用介绍：这个是安装时候创建的一个测试数据库，和它的名字一样，是一个完全的空数据库，没有任何表，可以删除。 1.4 mysql安装123456781.先安装brew网址：https://brew.sh/复制命令：/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;在终端运行2.brew 安装mysql输入命令：brew install mysql@5.7 （可以指定版本安装，不指定版本默认最新版本）复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0);) 12345678910111213141516171819202122232425263.修改环境变量brew安装的东西都是在 /usr/local/Cellar/ 路径下，所有需要进到里面找到mysql然后一层一层进去直到找到bin目录，获取这时路径我的电脑是：/usr/local/Cellar/mysql@5.7/5.7.23/bin （可能mysql版本不同，路径不同，自己切换目录找就ok）1）终端输入命令sudo vim .bash_profile2）在文档的最下方输入：export PATH=$PATH:/usr/local/Cellar/mysql@5.7/5.7.23/bin然后esc退出insert状态，并在最下方输入:wq保存退出。3）输入：source .bash_profile回车执行，运行环境变量。 1234567894.其他上面的做法每次关掉终端在打开都需要重新source .bash_profile。于是 vi ~/.zshrc，在这里面添加了：export PATH=${PATH}:/usr/local/Cellar/mysql@5.7/5.7.23/bin保存后 source ~/.zshrc 这样的话就可以一劳永逸了。https://www.cnblogs.com/xiao-xue-di/p/9655120.html 1.5sql语句优化select查询艺术1.保证不查询多余的列与行。 尽量避免select * 的存在，使用具体的列代替*，避免多余的列 使用where限定具体要查询的数据，避免多余的行 使用top，distinct关键字减少多余重复的行 2.慎用distinct关键字 distinct在查询一个字段或者很少字段的情况下使用，会避免重复数据的出现，给查询带来优化效果。 但是查询字段很多的情况下使用，则会大大降低查询效率。 由这个图，分析下: 很明显带distinct的语句cpu时间和占用时间都高于不带distinct的语句。原因是当查询很多字段时，如果使用distinct，数据库引擎就会对数据进行比较，过滤掉重复数据，然而这个比较，过滤的过程则会毫不客气的占用系统资源，cpu时间。 3.慎用union关键字 此关键字主要功能是把各个查询语句的结果集合并到一个结果集中返回给你。用法 123456&lt;select 语句1&gt;union&lt;select 语句2&gt;union&lt;select 语句3&gt;... 满足union的语句必须满足：1.列数相同。 2.对应列数的数据类型要保持兼容。 执行过程： 依次执行select语句–&gt;&gt;合并结果集—&gt;&gt;对结果集进行排序，过滤重复记录。 12345678910111213141516select * from (( orde o left join orderproduct op on o.orderNum=op.orderNum )inner join product p on op.proNum=p.productnum) where p.id&lt;10000unionselect * from (( orde o left join orderproduct op on o.orderNum=op.orderNum )inner join product p on op.proNum=p.productnum) where p.id&lt;20000 and p.id&gt;=10000unionselect * from (( orde o left join orderproduct op on o.orderNum=op.orderNum )inner join product p on op.proNum=p.productnum) where p.id&gt;20000 ---这里可以写p.id&gt;100 结果一样，因为他筛选过啦----------------------------------对比上下两个语句-----------------------------------------select * from (( orde o left join orderproduct op on o.orderNum=op.orderNum )inner join product p on op.proNum=p.productnum) 由此可见效率确实低，所以不是在必要情况下避免使用。其实有他执行的第三部：对结果集进行排序，过滤重复记录。就能看出不是什么好鸟。然而不对结果集排序过滤，显然效率是比union高的，那么不排序过滤的关键字有吗？答，有，他是union all，使用union all能对union进行一定的优化。。 4.判断表中是否存在数据 12select count(*) from product select top(1) id from product 很显然下面完胜 5.连接查询的优化 首先你要弄明白你想要的数据是什么样子的，然后再做出决定使用哪一种连接，这很重要。 各种连接的取值大小为： 内连接结果集大小取决于左右表满足条件的数量 左连接取决与左表大小，右相反。 完全连接和交叉连接取决与左右两个表的数据总数量 123456select * from ( (select * from orde where OrderId&gt;10000) o left join orderproduct op on o.orderNum=op.orderNum )select * from ( orde o left join orderproduct op on o.orderNum=op.orderNum ) where o.OrderId&gt;10000 由此可见减少连接表的数据数量可以提高效率。 insert插入优化12345678910111213141516--创建临时表create table #tb1( id int, name nvarchar(30), createTime datetime)declare @i intdeclare @sql varchar(1000)set @i=0while (@i&lt;100000) --循环插入10w条数据begin set @i=@i+1 set @sql=' insert into #tb1 values('+convert(varchar(10),@i)+',''erzi'+convert(nvarchar(30),@i)+''','''+convert(nvarchar(30),getdate())+''')' exec(@sql)end 我这里运行时间是51秒 123456789101112131415161718192021222324252627--创建临时表create table #tb2( id int, name nvarchar(30), createTime datetime)declare @i intdeclare @sql varchar(8000)declare @j intset @i=0while (@i&lt;10000) --循环插入10w条数据begin set @j=0 set @sql=' insert into #tb2 select '+convert(varchar(10),@i*100+@j)+',''erzi'+convert(nvarchar(30),@i*100+@j)+''','''+convert(varchar(50),getdate())+'''' set @i=@i+1 while(@j&lt;10) begin set @sql=@sql+' union all select '+convert(varchar(10),@i*100+@j)+',''erzi'+convert(nvarchar(30),@i*100+@j)+''','''+convert(varchar(50),getdate())+'''' set @j=@j+1 end exec(@sql)enddrop table #tb2select count(1) from #tb2 我这里运行时间大概是20秒 分析说明：insert into select批量插入，明显提升效率。所以以后尽量避免一个个循环插入。 优化修改删除语句如果你同时修改或删除过多数据，会造成cpu利用率过高从而影响别人对数据库的访问。 如果你删除或修改过多数据，采用单一循环操作，那么会是效率很低，也就是操作时间过程会很漫长。 这样你该怎么做呢？ 折中的办法就是，分批操作数据。 1234delete product where id&lt;1000delete product where id&gt;=1000 and id&lt;2000delete product where id&gt;=2000 and id&lt;3000..... 当然这样的优化方式不一定是最优的选择，其实这三种方式都是可以的，这要根据你系统的访问热度来定夺，关键你要明白什么样的语句是什么样的效果。 总结：优化，最重要的是在于你平时设计语句，数据库的习惯，方式。如果你平时不在意，汇总到一块再做优化，你就需要耐心的分析，然而分析的过程就看你的悟性，需求，知识水平啦。 1.6哈希表（散列表）原理详解2018-07-03 19:40:58 更多 版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。本文链接：https://blog.csdn.net/yyyljw/article/details/80903391 什么是哈希表？ 哈希表（Hash table，也叫散列表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。 记录的存储位置=f(关键字) 这里的对应关系f称为散列函数，又称为哈希（Hash函数），采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表（Hash table）。 哈希表hashtable(key，value) 就是把Key通过一个固定的算法函数既所谓的哈希函数转换成一个整型数字，然后就将该数字对数组长度进行取余，取余结果就当作数组的下标，将value存储在以该数字为下标的数组空间里。（或者：把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，而不可能从散列值来唯一的确定输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。） 而当使用哈希表进行查询的时候，就是再次使用哈希函数将key转换为对应的数组下标，并定位到该空间获取value，如此一来，就可以充分利用到数组的定位性能进行数据定位。 数组的特点是：寻址容易，插入和删除困难； 而链表的特点是：寻址困难，插入和删除容易。 那么我们能不能综合两者的特性，做出一种寻址容易，插入删除也容易的数据结构？答案是肯定的，这就是我们要提起的哈希表，哈希表有多种不同的实现方法，我接下来解释的是最常用的一种方法——拉链法，我们可以理解为“链表的数组”，如图： 左边很明显是个数组，数组的每个成员包括一个指针，指向一个链表的头，当然这个链表可能为空，也可能元素很多。我们根据元素的一些特征把元素分配到不同的链表中去，也是根据这些特征，找到正确的链表，再从链表中找出这个元素。 Hash的应用 1、Hash主要用于信息安全领域中加密算法，它把一些不同长度的信息转化成杂乱的128位的编码,这些编码值叫做Hash值. 也可以说，Hash就是找到一种数据内容和数据存放地址之间的映射关系 2、查找：哈希表，又称为散列，是一种更加快捷的查找技术。我们之前的查找，都是这样一种思路：集合中拿出来一个元素，看看是否与我们要找的相等，如果不等，缩小范围，继续查找。而哈希表是完全另外一种思路：当我知道key值以后，我就可以直接计算出这个元素在集合中的位置，根本不需要一次又一次的查找 举一个例子，假如我的数组A中，第i个元素里面装的key就是i，那么数字3肯定是在第3个位置，数字10肯定是在第10个位置。哈希表就是利用利用这种基本的思想，建立一个从key到位置的函数，然后进行直接计算查找。 3、Hash表在海量数据处理中有着广泛应用。 Hash Table的查询速度非常的快，几乎是O(1)的时间复杂度。 hash就是找到一种数据内容和数据存放地址之间的映射关系。 散列法：元素特征转变为数组下标的方法。 我想大家都在想一个很严重的问题：“如果两个字符串在哈希表中对应的位置相同怎么办？”,毕竟一个数组容量是有限的，这种可能性很大。解决该问题的方法很多，我首先想到的就是用“链表”。我遇到的很多算法都可以转化成链表来解决，只要在哈希表的每个入口挂一个链表，保存所有对应的字符串就OK了。 散列表的查找步骤 当存储记录时，通过散列函数计算出记录的散列地址 当查找记录时，我们通过同样的是散列函数计算记录的散列地址，并按此散列地址访问该记录 关键字——散列函数（哈希函数）——散列地址 优点：一对一的查找效率很高； 缺点：一个关键字可能对应多个散列地址；需要查找一个范围时，效果不好。 散列冲突：不同的关键字经过散列函数的计算得到了相同的散列地址。 好的散列函数=计算简单+分布均匀（计算得到的散列地址分布均匀） 哈希表是种数据结构，它可以提供快速的插入操作和查找操作。 优缺点 优点：不论哈希表中有多少数据，查找、插入、删除（有时包括删除）只需要接近常量的时间即0(1）的时间级。实际上，这只需要几条机器指令。 哈希表运算得非常快，在计算机程序中，如果需要在一秒种内查找上千条记录通常使用哈希表（例如拼写检查器)哈希表的速度明显比树快，树的操作通常需要O(N)的时间级。哈希表不仅速度快，编程实现也相对容易。 如果不需要有序遍历数据，并且可以提前预测数据量的大小。那么哈希表在速度和易用性方面是无与伦比的。 缺点：它是基于数组的，数组创建后难于扩展，某些哈希表被基本填满时，性能下降得非常严重，所以程序员必须要清楚表中将要存储多少数据（或者准备好定期地把数据转移到更大的哈希表中，这是个费时的过程）。 元素特征转变为数组下标的方法就是散列法。散列法当然不止一种，下面列出三种比较常用的： 1，除法散列法最直观的一种，上图使用的就是这种散列法，公式： index = value % 16学过汇编的都知道，求模数其实是通过一个除法运算得到的，所以叫“除法散列法”。 2，平方散列法求index是非常频繁的操作，而乘法的运算要比除法来得省时（对现在的CPU来说，估计我们感觉不出来），所以我们考虑把除法换成乘法和一个位移操作。公式： index = (value * value) &gt;&gt; 28 （右移，除以2^28。记法：左移变大，是乘。右移变小，是除。）如果数值分配比较均匀的话这种方法能得到不错的结果，但我上面画的那个图的各个元素的值算出来的index都是0——非常失败。也许你还有个问题，value如果很大，value * value不会溢出吗？答案是会的，但我们这个乘法不关心溢出，因为我们根本不是为了获取相乘结果，而是为了获取index。 3，斐波那契（Fibonacci）散列法 平方散列法的缺点是显而易见的，所以我们能不能找出一个理想的乘数，而不是拿value本身当作乘数呢？答案是肯定的。 1，对于16位整数而言，这个乘数是405032，对于32位整数而言，这个乘数是26544357693，对于64位整数而言，这个乘数是11400714819323198485 这几个“理想乘数”是如何得出来的呢？这跟一个法则有关，叫黄金分割法则，而描述黄金分割法则的最经典表达式无疑就是著名的斐波那契数列，即如此形式的序列：0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233,377, 610， 987, 1597, 2584, 4181, 6765, 10946，…。另外，斐波那契数列的值和太阳系八大行星的轨道半径的比例出奇吻合。 对我们常见的32位整数而言，公式： index = (value * 2654435769) &gt;&gt; 28 如果用这种斐波那契散列法的话，那上面的图就变成这样了： 注：用斐波那契散列法调整之后会比原来的取摸散列法好很多。 适用范围 快速查找，删除的基本数据结构，通常需要总数据量可以放入内存。 基本原理及要点 hash函数选择，针对字符串，整数，排列，具体相应的hash方法。碰撞处理，一种是open hashing，也称为拉链法；另一种就是closed hashing，也称开地址法，opened addressing。 散列冲突的解决方案： 1.建立一个缓冲区，把凡是拼音重复的人放到缓冲区中。当我通过名字查找人时，发现找的不对，就在缓冲区里找。 2.进行再探测。就是在其他地方查找。探测的方法也可以有很多种。 （1）在找到查找位置的index的index-1，index+1位置查找，index-2，index+2查找，依次类推。这种方法称为线性再探测。 （2）在查找位置index周围随机的查找。称为随机在探测。 （3）再哈希。就是当冲突时，采用另外一种映射方式来查找。 这个程序中是通过取模来模拟查找到重复元素的过程。对待重复元素的方法就是再哈希：对当前key的位置+7。最后，可以通过全局变量来判断需要查找多少次。我这里通过依次查找26个英文字母的小写计算的出了总的查找次数。显然，当总的查找次数/查找的总元素数越接近1时，哈希表更接近于一一映射的函数，查找的效率更高。 扩展 d-left hashing中的d是多个的意思，我们先简化这个问题，看一看2-left hashing。2-left hashing指的是将一个哈希表分成长度相等的两半，分别叫做T1和T2，给T1和T2分别配备一个哈希函数，h1和h2。在存储一个新的key时，同 时用两个哈希函数进行计算，得出两个地址h1[key]和h2[key]。这时需要检查T1中的h1[key]位置和T2中的h2[key]位置，哪一个 位置已经存储的（有碰撞的）key比较多，然后将新key存储在负载少的位置。如果两边一样多，比如两个位置都为空或者都存储了一个key，就把新key 存储在左边的T1子表中，2-left也由此而来。在查找一个key时，必须进行两次hash，同时查找两个位置。 问题实例（海量数据处理）我们知道hash 表在海量数据处理中有着广泛的应用，下面，请看另一道百度面试题：题目：海量日志数据，提取出某日访问百度次数最多的那个IP。方案：IP的数目还是有限的，最多2^32个，所以可以考虑使用hash将ip直接存入内存，然后进行统计。 1.7五大常用算法https://blog.csdn.net/beyond59241/article/details/50728614 https://blog.csdn.net/changyuanchn/article/details/51476281 据说有人归纳了计算机的五大常用算法，它们是贪婪算法，动态规划算法，分治算法，回溯算法以及分支限界算法。虽然不知道为何要将这五个算法归为最常用的算法，但是毫无疑问，这五个算法是有很多应用场景的，最优化问题大多可以利用这些算法解决。算法的本质就是解决问题。当数据量比较小时，其实根本就不需要什么算法，写一些for循环完全就可以很快速的搞定了，但是当数据量比较大，场景比较复杂的时候，编写for循环就是一个很不明智的方式了。一是耗时，二是写出的代码绝对是天书。当然还有第三点，这点也是最重要的，写代码是一种艺术，而不是搬砖。前面的文章里对这五种算法都已经做了详细的讲解和归纳，本文主要是一个总结，将这五种算法整理到一起来对比，分析一下。 0） 穷举法穷举法简单粗暴，没有什么问题是搞不定的，只要你肯花时间。同时对于小数据量，穷举法就是最优秀的算法。就像太祖长拳，简单，人人都能会，能解决问题，但是与真正的高手过招，就颓了。 1） 贪婪算法贪婪算法可以获取到问题的局部最优解，不一定能获取到全局最优解，同时获取最优解的好坏要看贪婪策略的选择。特点就是简单，能获取到局部最优解。就像打狗棍法，同一套棍法，洪七公和鲁有脚的水平就差太多了，因此同样是贪婪算法，不同的贪婪策略会导致得到差异非常大的结果。具体的详细解析请参见下面的文章：http://blog.csdn.net/changyuanchn/article/details/51417211 2） 动态规划算法当最优化问题具有重复子问题和最优子结构的时候，就是动态规划出场的时候了。动态规划算法的核心就是提供了一个memory来缓存重复子问题的结果，避免了递归的过程中的大量的重复计算。动态规划算法的难点在于怎么将问题转化为能够利用动态规划算法来解决。当重复子问题的数目比较小时，动态规划的效果也会很差。如果问题存在大量的重复子问题的话，那么动态规划对于效率的提高是非常恐怖的。就像斗转星移武功，对手强它也会比较强，对手若，他也会比较弱。具体的详细解析请参见下面的文章：http://blog.csdn.net/changyuanchn/article/details/51420028http://blog.csdn.net/changyuanchn/article/details/51429979 3）分治算法分治算法的逻辑更简单了，就是一个词，分而治之。分治算法就是把一个大的问题分为若干个子问题，然后在子问题继续向下分，一直到base cases，通过base cases的解决，一步步向上，最终解决最初的大问题。分治算法是递归的典型应用。具体的详细解析请参见下面的文章：http://blog.csdn.net/changyuanchn/article/details/17150109http://blog.csdn.net/changyuanchn/article/details/51465175 4） 回溯算法回溯算法是深度优先策略的典型应用，回溯算法就是沿着一条路向下走，如果此路不同了，则回溯到上一个分岔路，在选一条路走，一直这样递归下去，直到遍历万所有的路径。八皇后问题是回溯算法的一个经典问题，还有一个经典的应用场景就是迷宫问题。具体的详细解析请参见下面的文章：http://blog.csdn.net/changyuanchn/article/details/17354461 5） 分支限界算法回溯算法是深度优先，那么分支限界法就是广度优先的一个经典的例子。回溯法一般来说是遍历整个解空间，获取问题的所有解，而分支限界法则是获取一个解（一般来说要获取最优解）。具体的详细解析请参见下面的文章：http://blog.csdn.net/changyuanchn/article/details/17102037 分治法 基本思想 将一个问题，分解为多个子问题，递归的去解决子问题，最终合并为问题的解 适用情况 问题分解为小问题后容易解决 问题可以分解为小问题，即最优子结构 分解后的小问题解可以合并为原问题的解 小问题之间互相独立 实例 二分查找 快速排序 合并排序 大整数乘法 循环赛日程表 动态划分算法 基本思想 将问题分解为多个子问题（阶段），按顺序求解，前一个问题的解为后一个问题提供信息 适用情况 最优化原理：问题的最优解所包含的子问题的解也是最优的，即最优子结构 无后效性：某个状态一旦确定，就不受以后决策的影响 有重叠子问题 说明 递推关系是从次小的问题开始到较大问题的转化，往往可以用递归来实现，可以利用之前产生的子问题的解来减少重复的计算 回溯法 基本思想 选优搜索法，走不通就退回重选，按照深度优先搜索的策略，从根节点出发，深度搜索解空间 步骤 确定解空间 确定节点的扩展搜索规则 深度优先方式搜索解空间，用剪枝法避免无效搜索 分支界限法 基本思想 与回溯法类似，也是在解空间里搜索解得算法，不同点是，回溯法寻找所有解，分支界限法搜索一个解或者最优解 分支：广度优先策略或者最小耗费（最大效益）优先 分支搜索方式：FIFO、LIFO、优先队列式、分支界限搜索算法 贪心算法 基本思想 不从总体最优考虑，仅考虑局部最优解，问题必须具备后无效性 步骤 将问题分解为多个子问题 得到问题的局部最优解 合并子问题的局部最优解 适用情况 局部最优策略能导致全局最优解 子问题后无效性 1.8 JVM运行原理详解2017-05-31 15:01:45 更多 版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。本文链接：https://blog.csdn.net/Luomingkui1109/article/details/72820232 1.JVM简析： 作为一名Java使用者，掌握JVM的体系结构也是很有必要的。 说起Java，我们首先想到的是Java编程语言，然而事实上，Java是一种技术，它由四方面组成：Java编程语言、Java类文件格式、Java虚拟机和Java应用程序接口(Java API)。它们的关系如下图所示： 运行期环境代表着Java平台，开发人员编写Java代码(.java文件)，然后将之编译成字节码(.class文件)，再然后字节码被装入内存，一旦字节码进入虚拟机，它就会被解释器解释执行，或者是被即时代码发生器有选择的转换成机器码执行。 Java平台由Java虚拟机和Java应用程序接口搭建，Java语言则是进入这个平台的通道，用Java语言编写并编译的程序可以运行在这个平台上。这个平台的结构如下图所示： 在Java平台的结构中, 可以看出Java虚拟机(JVM) 处在核心的位置，是程序与底层操作系统和硬件无关的关键。它的下方是移植接口，移植接口由两部分组成：适配器和Java操作系统, 其中依赖于平台的部分称为适配器；JVM 通过移植接口在具体的平台和操作系统上实现；在JVM 的上方是Java的基本类库和扩展类库以及它们的API， 利用Java API编写的应用程序(application) 和小程序(Java applet) 可以在任何Java平台上运行而无需考虑底层平台, 就是因为有Java虚拟机(JVM)实现了程序与操作系统的分离，从而实现了Java 的平台无关性。 JVM在它的生存周期中有一个明确的任务，那就是运行Java程序，因此当Java程序启动的时候，就产生JVM的一个实例；当程序运行结束的时候，该实例也跟着消失了。 下面我们从JVM的基本概念和运过程程这两个方面入手来对它进行深入的研究。 2.JVM基本概念 2.1 基本概念： JVM是可运行Java代码的假想计算机 ，包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收，堆 和 一个存储方法域。JVM是运行在操作系统之上的，它与硬件没有直接的交互。 2.2 运行过程： 我们都知道Java源文件，通过编译器，能够生产相应的.Class文件，也就是字节码文件，而字节码文件又通过Java虚拟机中的解释器，编译成特定机器上的机器码 。 也就是如下： • Java源文件—-&gt;编译器—-&gt;字节码文件 • 字节码文件—-&gt;JVM—-&gt;机器码 每一种平台的解释器是不同的，但是实现的虚拟机是相同的，这也就是Java为什么能够跨平台的原因了 ，当一个程序从开始运行，这时虚拟机就开始实例化了，多个程序启动就会存在多个虚拟机实例。程序退出或者关闭，则虚拟机实例消亡，多个虚拟机实例之间数据不能共享。 2.3 三种JVM: • Sun公司的HotSpot； • BEA公司的JRockit； • IBM公司的J9 JVM； 在JDK1.7及其以前我们所使用的都是Sun公司的HotSpot，但由于Sun公司和BEA公司都被oracle收购，jdk1.8将采用Sun公司的HotSpot和BEA公司的JRockit两个JVM中精华形成jdk1.8的JVM。 3.JVM的体系结构 3.1 Class Loader类加载器 负责加载 .class文件，class文件在文件开头有特定的文件标示，并且ClassLoader负责class文件的加载等，至于它是否可以运行，则由Execution Engine决定。 3.2 Native Interface本地接口 本地接口的作用是融合不同的编程语言为Java所用，它的初衷是融合C/C++程序，Java诞生的时候C/C++横行的时候，要想立足，必须有调用C/C++程序，于是就在内存中专门开辟了一块区域处理标记为native的代码，它的具体作法是Native Method Stack中登记native方法，在Execution Engine执行时加载native libraies。 目前该方法使用的越来越少了，除非是与硬件有关的应用，比如通过Java程序驱动打印机，或者Java系统管理生产设备，在企业级应用中已经比较少见， 因为现在的异构领域间的通信很发达，比如可以使用Socket通信，也可以使用Web Service等。 3.3 Execution Engine 执行引擎 执行包在装载类的方法中的指令，也就是方法。 3.4 Runtime data area 运行数据区 虚拟机内存或者Jvm内存，冲整个计算机内存中开辟一块内存存储Jvm需要用到的对象，变量等，运行区数据有分很多小区，分别为：方法区，虚拟机栈，本地方法栈，堆，程序计数器。 \\4. Runtime data area 运行数据区详解（栈管运行，堆管存储）： 说明：JVM调优主要就是优化 Heap堆 和 Method Area 方法区。 4.1 Native Method Stack 本地方法栈 它的具体做法是Native Method Stack中登记native方法，在Execution Engine执行时加载native libraies。 4.2 PC Register程序计数器 每个线程都有一个程序计算器，就是一个指针，指向方法区中的方法字节码（下一个将要执行的指令代码），由执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不记。 4.3 Method Area方法区 方法区是被所有线程共享，所有字段和方法字节码，以及一些特殊方法如构造函数，接口代码也在此定义。简单说，所有定义的方法的信息都保存在该区域，此区域属于共享区间。 静态变量，常量，类信息(构造方法/接口定义)，运行时常量池存在方法区中；但是实例变量存在堆内存中，和方法区无关。 4.4 Stack 栈 4.4.1 栈是什么？ 栈也叫栈内存，主管Java程序的运行，是在线程创建时创建，它的生命期是跟随线程的生命期，线程结束栈内存也就释放，对于栈来说不存在垃圾回收问题，只要线程一结束该栈就Over，生命周期和线程一致，是线程私有的。 基本类型的变量和对象的引用变量都是在函数的栈内存中分配。 4.4.2 栈存储什么？ 栈帧中主要保存3类数据： ​ 本地变量（Local Variables）：输入参数和输出参数以及方法内的变量； ​ 栈操作（Operand Stack）：记录出栈、入栈的操作； ​ 栈帧数据（Frame Data）：包括类文件、方法等等。 4.4.3 栈运行原理 栈中的数据都是以栈帧（Stack Frame）的格式存在，栈帧是一个内存区块，是一个数据集，是一个有关方法和运行期数据的数据集，当一个方法A被调用时就产生了一个栈帧F1，并被压入到栈中， A方法又调用了B方法，于是产生栈帧F2也被压入栈， B方法又调用了C方法，于是产生栈帧F3也被压入栈…… 依次执行完毕后，先弹出后进……F3栈帧，再弹出F2栈帧，再弹出F1栈帧。 遵循“先进后出”/“后进先出”原则。 4.5 Heap 堆 堆这块区域是JVM中最大的，应用的对象和数据都是存在这个区域，这块区域也是线程共享的，也是 gc 主要的回收区，一个 JVM 实例只存在一个堆类存，堆内存的大小是可以调节的。类加载器读取了类文件后，需要把类、方法、常变量放到堆内存中，以方便执行器执行，堆内存分为三部分： 4.5.1 新生区 新生区是类的诞生、成长、消亡的区域，一个类在这里产生，应用，最后被垃圾回收器收集，结束生命。新生区又分为两部分：伊甸区（Eden space）和幸存者区（Survivor pace），所有的类都是在伊甸区被new出来的。幸存区有两个：0区（Survivor 0 space）和1区（Survivor 1 space）。当伊甸园的空间用完时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园进行垃圾回收（Minor GC）,将伊甸园中的剩余对象移动到幸存0区。若幸存0区也满了，再对该区进行垃圾回收，然后移动到1区。那如果1去也满了呢？再移动到养老区。若养老区也满了，那么这个时候将产生Major GC（FullGCC），进行养老区的内存清理。若养老区执行Full GC 之后发现依然无法进行对象的保存，就会产生OOM异常“OutOfMemoryError”。 如果出现java.lang.OutOfMemoryError: Java heap space异常，说明Java虚拟机的堆内存不够。原因有二： a.Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调整。 b.代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）。 4.5.2 养老区 ​ 养老区用于保存从新生区筛选出来的 JAVA 对象，一般池对象都在这个区域活跃。 4.5.3 永久区 ​ 永久存储区是一个常驻内存区域，用于存放JDK自身所携带的 Class,Interface 的元数据，也就是说它存储的是运行环境必须的类信息，被装载进此区域的数据是不会被垃圾回收器回收掉的，关闭 JVM 才会释放此区域所占用的内存。 如果出现java.lang.OutOfMemoryError: PermGen space，说明是Java虚拟机对永久代Perm内存设置不够。 原因有二： a. 程序启动需要加载大量的第三方jar包。例如：在一个Tomcat下部署了太多的应用。 b. 大量动态反射生成的类不断被加载，最终导致Perm区被占满。 5.说明 Jdk1.6及之前：常量池分配在永久代 ； Jdk1.7：有，但已经逐步“去永久代” ； Jdk1.8及之后：无(java.lang.OutOfMemoryError: PermGen space,这种错误将不会出现在JDK1.8中 )； 5.1 在JDK1.7 中 5.2 在JDK 1.8 中 1.9 mvcJsp+JavaBean模式，Jsp+Servlet模式，MVC模式介绍2019-01-16 22:14:11 更多 版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。本文链接：https://blog.csdn.net/ITBigGod/article/details/86515893 Jsp+JavaBean模式，Jsp+Servlet模式，MVC模式介绍鉴于最近一些零基础的朋友要做项目，我梳理一下web项目的运行流程，主要是说一下理解思路，有什么不足或不对的，多多理解。 在N久前，传统的项目有用jsp+JavaBeans开发的，有用JSP+Servlet开发的，还有的是符合mvc的JSP+Servlet+JavaBeans开发的。这些说法都没有错。前面两个年代久远，不说了，主要重点说一下，MVC模式。 1.JSP+JavaBean模式：在现在的开发中， JSP+JavaBean模式开发非常之少了,除非你的项目只有芝麻大一点它可以说web开发中的是第一代设计模式，主要是JSP充当视图和控制器，而JavaBeans充当模型。 特点：该模式将业务逻辑与页面表现进行分离，在一定程度上增加了程序的可调试性和维护性。缺点：页面将控制与显示集于一身。结论：简单，适合小型项目的快速构建与运行。 2.JSP+Servlet模式：后来慢慢发展，有人使用jsp+servlet模式来开发。其中就分为：（可能层的定义不这么叫，我忘了具体的。） view层——类比jsp前台交互,比如我们页面显示等，但是jsp中也写了数据交互的东西。JSTL等 web层——类比servlet，它与前台数据进行交互，又和数据库打交道，其次它也动态输出html内。 简单的例子 servlet层中有a方法，实现和数据库交互，jsp将注册信息提交给servlet，在servlet里调用a方法，来接收sp的数据，然后将数据就和数据库关联。 值得一提的是：Servlet和JSP的一大共同点：Servlet和jsp都可以操作网页： • Servlet可以在.java文件中通过HttpServletResponse对象动态输出HTML内容，比如out.print()。• JSP在静态HTML/JSP中可以嵌入Java代码，常见JSTL标签&lt;%%&gt;，Java代码被动态执行后生成新的HTML内容。 也就是说，单单只用jsp或者serlvet都可以对网页进行开发，也正是这样，导致两者它们都有难以维护和杂乱代码的困扰。 所以！扬长避短——MVC(Model-View-Controller)模式非常适合解决这一问题。 3.mvc模式：JSP + Servlet + JavaBean三层架构MVC模式（Model-View-Controller），是系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）：可以理解为：JSP充当视图，Servlet充当控制器，JavaBeans充当模型。 1.View层（JSP）,前台交互,比如我们注册时的数据等等,serlvet就是与前台数据进行交互的 2.Contrller层（servlet充当）：Model与View之间沟通的桥梁， 这个层有业务处理,用户的注册登录就可以看做是User的业务,我们就需要将相关的处理代码写到这个层中。 3.Model层：实现系统的业务逻辑，即javaBean，常见的就是封装对象的属性、数据库连接操作等。 常规会写一个dao层，是属于mvc里面Model层抽出来。目的就是更单纯的和数据库打交道,将servlet的数据和数据库进行交互。 特点：JSP作为视图，来表现页面；Servlet作为控制器，控制程序的流程并调用业务进行处理；JavaBean封装了业务逻辑。遵循了MVC设计模式缺点：没有统一的开发框架导致开发周期长 图示： 在MVC开发的软件系统中，描述如下所示： 12通俗的说，就是web broswer通过view层的jsp页面发出的所有的http请求都应该交给servlet，即控制层来。servlet通过对Javabean，即核心的Model层处理，得到处理结果，然后返回给view层的Jsp页面。Jsp页面返回给浏览器最后的html网页。1 简单的例子: 1234比如用户的注册业务——addUser()前台取得注册信息--封装到user对象中,然后调用user的业务，即注册功能控制。这时就跳到Contrller层,然后此层调用dao中的方法将数据存入数据库。123 在实际应用中可以这样理解：***.JSP,*.html属于视图层，servlet属于控制器层，Class类文件属于javabeans。** （上层的依赖下层的，servlet是用JAVA写的控制器层。） 对应项目的图示：这种最经典的mvc模式了。 总结：MVC大体上是jsp+Javabean+Servlet，MVC模式在Web开发中的好处是非常明显，它规避了JSP与Servlet各自的短板，Servlet只负责业务逻辑而不会通过out.append()动态生成HTML代码；JSP中也不会充斥着大量的业务代码，这大大提高了代码的可读性和可维护性。 1.10 耦合程序的耦合 ​ 耦合：程序间的依赖关系 ​ 包括：类之间的依赖 方法之间的依赖 ​ 解耦：降低程序间的依赖关系 ​ 实际开发中：应该做到：编译器不依赖，运行时才依赖 ​ 解耦的思路：第一步：使用反射来创建对象，而避免使用new关键字 ​ 第二步：通过读取配置文件来获取要创建对象的全限定名 1.11 创建Bean的三种方式第一种：使用默认构造函数创建 ​ 在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时，采用的就是默认构造函数创建bean对象，此时如果勒种没有默认构造函数，则对象无法创建 第二种：使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器） 第三种：使用工厂中的静态方法创建对象（使用某个勒种的讲台方法创建对象，并存入spring容器）","link":"/2021/05/23/java%E9%87%8C%E7%9A%84%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E6%98%AF%E6%94%BE%E5%9C%A8%E4%BA%86%E5%A0%86%E5%86%85%E5%AD%98%E8%BF%98%E6%98%AF%E6%A0%88%E5%86%85%E5%AD%98%E7%9A%84%E5%89%AF%E6%9C%AC/"}],"tags":[{"name":"第一份博客","slug":"第一份博客","link":"/tags/%E7%AC%AC%E4%B8%80%E4%BB%BD%E5%8D%9A%E5%AE%A2/"},{"name":"java","slug":"java","link":"/tags/java/"}],"categories":[]}